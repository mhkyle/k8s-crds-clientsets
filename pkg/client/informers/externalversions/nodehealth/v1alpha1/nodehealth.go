/*
Copyright The Kubernetes Authors.

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	time "time"

	nodehealthv1alpha1 "../pkg/apis/nodehealth/v1alpha1"
	versioned "../pkg/client/clientset/versioned"
	internalinterfaces "../pkg/client/informers/externalversions/internalinterfaces"
	v1alpha1 "../pkg/client/listers/nodehealth/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// NodeHealthInformer provides access to a shared informer and lister for
// NodeHealths.
type NodeHealthInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.NodeHealthLister
}

type nodeHealthInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewNodeHealthInformer constructs a new informer for NodeHealth type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewNodeHealthInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredNodeHealthInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredNodeHealthInformer constructs a new informer for NodeHealth type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredNodeHealthInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ComputeV1alpha1().NodeHealths(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.ComputeV1alpha1().NodeHealths(namespace).Watch(context.TODO(), options)
			},
		},
		&nodehealthv1alpha1.NodeHealth{},
		resyncPeriod,
		indexers,
	)
}

func (f *nodeHealthInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredNodeHealthInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *nodeHealthInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&nodehealthv1alpha1.NodeHealth{}, f.defaultInformer)
}

func (f *nodeHealthInformer) Lister() v1alpha1.NodeHealthLister {
	return v1alpha1.NewNodeHealthLister(f.Informer().GetIndexer())
}
